struct Stack * stack_create(int size) {
	struct Stack * s = malloc(sizeof(struct Stack) + sizeof(Data) * N);
	stack_init(s);
	return s;
};

void stack_push(struct Stack * s, Data x) {
	//if (stack_is_full(s)) {
	if (s->n == s->size) {
		s->size += N;
		s->a = realloc(s->a, s->size * sizeof(Data) + sizeof(struct Stack));
	}
	s->a[s->n] = x;
	s->n ++;
};

/*int stack_is_full(struct Stack * s) {
	//return (s->n == sizeof(s->a) / sizeof(s->a[0]) );
	return (s->n == s->size);
};
*/

Data stack_pop(struct Stack * s) {
	Data res;
	s->n --;
	res = s->a[s->n];
	s->size = s->n;
	s->a = realloc(s->a, s->size * sizeof(Data));
	return res;
};

Data stack_get(struct Stack * s) {
	Data res;
	res = s->a[s->n];
	return res;
};

void stack_print(struct Stack * s) {
	if (s->n == 0) {
		printf("Empty stack\n");
		return;
	}
	for (unsigned int i = 0; i < (s->n); ++i)
		printf("%d ", s->a[i]);
	printf("\n");
};

int stack_size(struct Stack * s) {
	int res;
	res = s->n --;
	return res;
};

int stack_is_empty(struct Stack * s) {
	return (s->n == 0);
};

void stack_clear(struct Stack * s) {
	free(s->a);
	stack_init(s);
};

void stack_destroy(struct Stack * s) {
	free(s->a);
	free(s);
	s = 0;
};